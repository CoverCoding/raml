#%RAML 1.0
title: Cover API
version: v1
baseUri: http://api.cover.com/{version}
mediaType: application/json
securitySchemes:
  oauth_2_0: !include securitySchemes/oauth_2_0.raml
protocols: [HTTP]
types:
  Model:
    type: object
    properties:
      id?: string
      createdAt?: datetime
      updatedAt?: datetime
  User:
    type: Model
    properties:
      lastname?: string
      firstname?: string
      classOfGraducation?: number
      email?: string
      password?: string
      role?:
        enum: [admin, normal]

  Link:
    type: Model
    properties:
      title?: string
      url: string
      upvotes?: number
      downvotes?: number
      voteState?:
        enum: [up, down, not]

  Keyword:
    type: Model
    properties:
      start: number
      length: number
      links?: Link[]

  Problem:
    type: Model
    properties:
      title: string
      description?: string
      body?: string
      author?: User
      due?: datetime
      keywords?: Keyword?

  Course:
    type: Model
    properties:
      title: string
      courseNumber: string
      year: number
      term: string
      instructor: string
      problemCount?: number
      problems?: Problem[]

/courses:
  get:
    responses:
      200:
        body:
          application/json:
            type: Course[]
            example:
              -
                createdAt: 2016-02-28T16:41:41.090Z
                id: "1"
                title: "Webware"
                courseNumber: "cs101"
                year: 2017
                term: "A"
                problemCount: 100
                instructor: "Harrison"
              -
                createdAt: 2016-02-28T16:41:41.090Z
                id: "1"
                title: "Webware 2"
                courseNumber: "cs202"
                year: 2017
                term: "B"
                problemCount: 100
                instructor: "Agu"
  post:
    description: Add a course
    body:
      application/json:
        type: Course
        example:
          title: "Physics"
          courseNumber: "ph1121"
          year: 2017
          term: "D"
          instructor: "12345"
    responses:
      200:
  /{course_id}:
    get:
      responses:
        200:
          body:
            application/json:
              type: Course
              example:
                createdAt: 2016-02-28T16:41:41.090Z
                id: "1"
                title: "Webware 2"
                courseNumber: "cs202"
                year: 2017
                term: "B"
                problemCount: 100
                instructor: "Agu"
                problems:
                  -
                    id: "01447ee6-648c-4fe3-b1c9-b29517db3e4f"
                    title: "Assignment 1"
                    description: "lllll"
    /problems:
      get:
        description: get a list of problems
      post:
        description: create a problem
        headers:
          AuthorID:
            description: the identifier for the user who posts a new problem
            type: string
            example: "d05ce367-5b54-4436-9537-0386987ba18e"
        body:
          application/json:
            type: Problem
            example:
              title: "Assignment 1"
              body: "This exercise explores the differences between agent functions[1] and agent programs[2].\na. Can there be more than one agent program that implements a given agent function?\nGive an example, or show why one is not possible.\nb. Are there agent functions that cannot be implemented by any agent program?\nc. Given a fixed machine architecture[3], does each agent program implement exactly one agent function?\nd. Given an architecture with n bits of storage[4], how many different possible agent programs are there?\ne. Suppose we keep the agent program fixed but speed up the machine by a factor of two[5]. Does that change the agent function?"
        responses:
          201:
      /{problem_id}:
        get:
          description: get a specific problem
          responses:
            200:
              body:
                application/json:
                  type: Problem
                  example:
                      id: "01447ee6-648c-4fe3-b1c9-b29517db3e4f"
                      title: "Assignment 1"
                      body: "This exercise explores the differences between agent functions[1] and agent programs[2].\na. Can there be more than one agent program that implements a given agent function?\nGive an example, or show why one is not possible.\nb. Are there agent functions that cannot be implemented by any agent program?\nc. Given a fixed machine architecture[3], does each agent program implement exactly one agent function?\nd. Given an architecture with n bits of storage[4], how many different possible agent programs are there?\ne. Suppose we keep the agent program fixed but speed up the machine by a factor of two[5]. Does that change the agent function?"
                      author:
                        id: "1d95d277-1af0-4443-9607-3b8fcba11ec1"
                        lastname: "Liu"
                        firstname: "Harry"
                        classOfGraducation: 2018
                        email: "byliuyang11@gmail.com"
                        createdAt: 2016-02-28T16:41:41.090Z
                      createdAt: 2016-02-28T16:41:41.090Z
        /keywords:
          get:
            description: get the list of keywords of a specific problem
            responses:
              200:
                body:
                  application/json:
                    type: Keyword[]
                    example:
                      -
                        start: 10
                        length: 25
                        id: "1d95d277-1af0-4443-9607-3b8fcba11aaa"
                        links:
                          -
                            title: "facebook"
                            url: "facebook.com"
                            upvotes: 12
                            downvotes: 12
                            voteState: not
                          -
                            title: "google"
                            url: "google.com"
                            upvotes: 51
                            downvotes: 10
                            voteState: up
                      -
                        start: 10
                        length: 25
                        id: "1d95d277-1af0-4443-9607-3b8fcba11aaa"
                        links:
                          -
                            title: "facebook"
                            url: "facebook.com"
                            upvotes: 12
                            downvotes: 12
                            voteState: not
                          -
                            title: "google"
                            url: "google.com"
                            upvotes: 51
                            downvotes: 10
                            voteState: up
          post:
            description: create a new keyword
            body:
              application/json:
                type: Keyword
                example:
                  start: 15
                  length: 20
            responses:
              201:

          /{keyword_id}:
            /links:
              post:
                description: Create a link for specific problem
                body:
                  application/json:
                    type: Link
                    example:
                      url: "https://en.wikipedia.org/wiki/Good"
            /{link_id}:
              /upvotes:
                post:
                  headers:
                    UserID:
                      type: string
                      example: "53900363-76fa-4803-9cbf-67ba7e6f43e2"
                  responses:
                    201:
                delete:
                  responses:
                    205:
                      description: "Successfully deleted"
                    404:
              /downvotes:
                post:
                  headers:
                    UserID:
                      type: string
                      example: "53900363-76fa-4803-9cbf-67ba7e6f43e2"
                  responses:
                    201:
                delete:
                  responses:
                    205:
                      description: "Successfully delet"
                    404:

/users:
  post:
    body:
      application/json:
        type: User
        example:
          email: "user@example.com"
          password: "K21PQW9cMvM04d2G"
    responses:
      201:
        description: Successfully created this user

  /{user_id}:
    get:
      responses:
        200:
          body:
            application/json:
              type: User
              example:
                lastname: "Steward"
                firstname: "John"
                classOfGraducation: 2017
                email: "john@example.com"
    put:
      body:
        application/json:
          type: User
          example:
            password: "K21PQW9cMvM04d2G"
      responses:
        200:
          description: Successfully modified this user
        404:
          description: Did not find this user
    delete:
      responses:
        205:
          description: Successfully modified this user
        404:
          description: Did not find this user
